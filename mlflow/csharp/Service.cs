// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mlflow {

  /// <summary>Holder for reflection information generated from service.proto</summary>
  public static partial class ServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1zZXJ2aWNlLnByb3RvEgZtbGZsb3caFXNjYWxhcGIvc2NhbGFwYi5wcm90",
            "bxoQZGF0YWJyaWNrcy5wcm90byJFCgZNZXRyaWMSCwoDa2V5GAEgASgJEg0K",
            "BXZhbHVlGAIgASgBEhEKCXRpbWVzdGFtcBgDIAEoAxIMCgRzdGVwGAQgASgD",
            "IiMKBVBhcmFtEgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCSJDCgNSdW4S",
            "HQoEaW5mbxgBIAEoCzIPLm1sZmxvdy5SdW5JbmZvEh0KBGRhdGEYAiABKAsy",
            "Dy5tbGZsb3cuUnVuRGF0YSJnCgdSdW5EYXRhEh8KB21ldHJpY3MYASADKAsy",
            "Di5tbGZsb3cuTWV0cmljEh0KBnBhcmFtcxgCIAMoCzINLm1sZmxvdy5QYXJh",
            "bRIcCgR0YWdzGAMgAygLMg4ubWxmbG93LlJ1blRhZyIkCgZSdW5UYWcSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgJIisKDUV4cGVyaW1lbnRUYWcSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgJIssBCgdSdW5JbmZvEg4KBnJ1bl9p",
            "ZBgPIAEoCRIQCghydW5fdXVpZBgBIAEoCRIVCg1leHBlcmltZW50X2lkGAIg",
            "ASgJEg8KB3VzZXJfaWQYBiABKAkSIQoGc3RhdHVzGAcgASgOMhEubWxmbG93",
            "LlJ1blN0YXR1cxISCgpzdGFydF90aW1lGAggASgDEhAKCGVuZF90aW1lGAkg",
            "ASgDEhQKDGFydGlmYWN0X3VyaRgNIAEoCRIXCg9saWZlY3ljbGVfc3RhZ2UY",
            "DiABKAkiuwEKCkV4cGVyaW1lbnQSFQoNZXhwZXJpbWVudF9pZBgBIAEoCRIM",
            "CgRuYW1lGAIgASgJEhkKEWFydGlmYWN0X2xvY2F0aW9uGAMgASgJEhcKD2xp",
            "ZmVjeWNsZV9zdGFnZRgEIAEoCRIYChBsYXN0X3VwZGF0ZV90aW1lGAUgASgD",
            "EhUKDWNyZWF0aW9uX3RpbWUYBiABKAMSIwoEdGFncxgHIAMoCzIVLm1sZmxv",
            "dy5FeHBlcmltZW50VGFnIpEBChBDcmVhdGVFeHBlcmltZW50EhIKBG5hbWUY",
            "ASABKAlCBPiGGQESGQoRYXJ0aWZhY3RfbG9jYXRpb24YAiABKAkaIQoIUmVz",
            "cG9uc2USFQoNZXhwZXJpbWVudF9pZBgBIAEoCTor4j8oCiZjb20uZGF0YWJy",
            "aWNrcy5ycGMuUlBDWyR0aGlzLlJlc3BvbnNlXSKYAQoPTGlzdEV4cGVyaW1l",
            "bnRzEiMKCXZpZXdfdHlwZRgBIAEoDjIQLm1sZmxvdy5WaWV3VHlwZRozCghS",
            "ZXNwb25zZRInCgtleHBlcmltZW50cxgBIAMoCzISLm1sZmxvdy5FeHBlcmlt",
            "ZW50OiviPygKJmNvbS5kYXRhYnJpY2tzLnJwYy5SUENbJHRoaXMuUmVzcG9u",
            "c2VdIrABCg1HZXRFeHBlcmltZW50EhsKDWV4cGVyaW1lbnRfaWQYASABKAlC",
            "BPiGGQEaVQoIUmVzcG9uc2USJgoKZXhwZXJpbWVudBgBIAEoCzISLm1sZmxv",
            "dy5FeHBlcmltZW50EiEKBHJ1bnMYAiADKAsyDy5tbGZsb3cuUnVuSW5mb0IC",
            "GAE6K+I/KAomY29tLmRhdGFicmlja3MucnBjLlJQQ1skdGhpcy5SZXNwb25z",
            "ZV0iaAoQRGVsZXRlRXhwZXJpbWVudBIbCg1leHBlcmltZW50X2lkGAEgASgJ",
            "QgT4hhkBGgoKCFJlc3BvbnNlOiviPygKJmNvbS5kYXRhYnJpY2tzLnJwYy5S",
            "UENbJHRoaXMuUmVzcG9uc2VdImkKEVJlc3RvcmVFeHBlcmltZW50EhsKDWV4",
            "cGVyaW1lbnRfaWQYASABKAlCBPiGGQEaCgoIUmVzcG9uc2U6K+I/KAomY29t",
            "LmRhdGFicmlja3MucnBjLlJQQ1skdGhpcy5SZXNwb25zZV0iegoQVXBkYXRl",
            "RXhwZXJpbWVudBIbCg1leHBlcmltZW50X2lkGAEgASgJQgT4hhkBEhAKCG5l",
            "d19uYW1lGAIgASgJGgoKCFJlc3BvbnNlOiviPygKJmNvbS5kYXRhYnJpY2tz",
            "LnJwYy5SUENbJHRoaXMuUmVzcG9uc2VdIrgBCglDcmVhdGVSdW4SFQoNZXhw",
            "ZXJpbWVudF9pZBgBIAEoCRIPCgd1c2VyX2lkGAIgASgJEhIKCnN0YXJ0X3Rp",
            "bWUYByABKAMSHAoEdGFncxgJIAMoCzIOLm1sZmxvdy5SdW5UYWcaJAoIUmVz",
            "cG9uc2USGAoDcnVuGAEgASgLMgsubWxmbG93LlJ1bjor4j8oCiZjb20uZGF0",
            "YWJyaWNrcy5ycGMuUlBDWyR0aGlzLlJlc3BvbnNlXSK+AQoJVXBkYXRlUnVu",
            "Eg4KBnJ1bl9pZBgEIAEoCRIQCghydW5fdXVpZBgBIAEoCRIhCgZzdGF0dXMY",
            "AiABKA4yES5tbGZsb3cuUnVuU3RhdHVzEhAKCGVuZF90aW1lGAMgASgDGi0K",
            "CFJlc3BvbnNlEiEKCHJ1bl9pbmZvGAEgASgLMg8ubWxmbG93LlJ1bkluZm86",
            "K+I/KAomY29tLmRhdGFicmlja3MucnBjLlJQQ1skdGhpcy5SZXNwb25zZV0i",
            "WgoJRGVsZXRlUnVuEhQKBnJ1bl9pZBgBIAEoCUIE+IYZARoKCghSZXNwb25z",
            "ZTor4j8oCiZjb20uZGF0YWJyaWNrcy5ycGMuUlBDWyR0aGlzLlJlc3BvbnNl",
            "XSJbCgpSZXN0b3JlUnVuEhQKBnJ1bl9pZBgBIAEoCUIE+IYZARoKCghSZXNw",
            "b25zZTor4j8oCiZjb20uZGF0YWJyaWNrcy5ycGMuUlBDWyR0aGlzLlJlc3Bv",
            "bnNlXSK1AQoJTG9nTWV0cmljEg4KBnJ1bl9pZBgGIAEoCRIQCghydW5fdXVp",
            "ZBgBIAEoCRIRCgNrZXkYAiABKAlCBPiGGQESEwoFdmFsdWUYAyABKAFCBPiG",
            "GQESFwoJdGltZXN0YW1wGAQgASgDQgT4hhkBEgwKBHN0ZXAYBSABKAMaCgoI",
            "UmVzcG9uc2U6K+I/KAomY29tLmRhdGFicmlja3MucnBjLlJQQ1skdGhpcy5S",
            "ZXNwb25zZV0ijQEKCExvZ1BhcmFtEg4KBnJ1bl9pZBgEIAEoCRIQCghydW5f",
            "dXVpZBgBIAEoCRIRCgNrZXkYAiABKAlCBPiGGQESEwoFdmFsdWUYAyABKAlC",
            "BPiGGQEaCgoIUmVzcG9uc2U6K+I/KAomY29tLmRhdGFicmlja3MucnBjLlJQ",
            "Q1skdGhpcy5SZXNwb25zZV0ikAEKEFNldEV4cGVyaW1lbnRUYWcSGwoNZXhw",
            "ZXJpbWVudF9pZBgBIAEoCUIE+IYZARIRCgNrZXkYAiABKAlCBPiGGQESEwoF",
            "dmFsdWUYAyABKAlCBPiGGQEaCgoIUmVzcG9uc2U6K+I/KAomY29tLmRhdGFi",
            "cmlja3MucnBjLlJQQ1skdGhpcy5SZXNwb25zZV0iiwEKBlNldFRhZxIOCgZy",
            "dW5faWQYBCABKAkSEAoIcnVuX3V1aWQYASABKAkSEQoDa2V5GAIgASgJQgT4",
            "hhkBEhMKBXZhbHVlGAMgASgJQgT4hhkBGgoKCFJlc3BvbnNlOiviPygKJmNv",
            "bS5kYXRhYnJpY2tzLnJwYy5SUENbJHRoaXMuUmVzcG9uc2VdIm0KCURlbGV0",
            "ZVRhZxIUCgZydW5faWQYASABKAlCBPiGGQESEQoDa2V5GAIgASgJQgT4hhkB",
            "GgoKCFJlc3BvbnNlOiviPygKJmNvbS5kYXRhYnJpY2tzLnJwYy5SUENbJHRo",
            "aXMuUmVzcG9uc2VdIn0KBkdldFJ1bhIOCgZydW5faWQYAiABKAkSEAoIcnVu",
            "X3V1aWQYASABKAkaJAoIUmVzcG9uc2USGAoDcnVuGAEgASgLMgsubWxmbG93",
            "LlJ1bjor4j8oCiZjb20uZGF0YWJyaWNrcy5ycGMuUlBDWyR0aGlzLlJlc3Bv",
            "bnNlXSKFAgoKU2VhcmNoUnVucxIWCg5leHBlcmltZW50X2lkcxgBIAMoCRIO",
            "CgZmaWx0ZXIYBCABKAkSJwoNcnVuX3ZpZXdfdHlwZRgDIAEoDjIQLm1sZmxv",
            "dy5WaWV3VHlwZRITCgttYXhfcmVzdWx0cxgFIAEoBRIQCghvcmRlcl9ieRgG",
            "IAMoCRISCgpwYWdlX3Rva2VuGAcgASgJGj4KCFJlc3BvbnNlEhkKBHJ1bnMY",
            "ASADKAsyCy5tbGZsb3cuUnVuEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCTor",
            "4j8oCiZjb20uZGF0YWJyaWNrcy5ycGMuUlBDWyR0aGlzLlJlc3BvbnNlXSLY",
            "AQoNTGlzdEFydGlmYWN0cxIOCgZydW5faWQYAyABKAkSEAoIcnVuX3V1aWQY",
            "ASABKAkSDAoEcGF0aBgCIAEoCRISCgpwYWdlX3Rva2VuGAQgASgJGlYKCFJl",
            "c3BvbnNlEhAKCHJvb3RfdXJpGAEgASgJEh8KBWZpbGVzGAIgAygLMhAubWxm",
            "bG93LkZpbGVJbmZvEhcKD25leHRfcGFnZV90b2tlbhgDIAEoCTor4j8oCiZj",
            "b20uZGF0YWJyaWNrcy5ycGMuUlBDWyR0aGlzLlJlc3BvbnNlXSI7CghGaWxl",
            "SW5mbxIMCgRwYXRoGAEgASgJEg4KBmlzX2RpchgCIAEoCBIRCglmaWxlX3Np",
            "emUYAyABKAMiqAEKEEdldE1ldHJpY0hpc3RvcnkSDgoGcnVuX2lkGAMgASgJ",
            "EhAKCHJ1bl91dWlkGAEgASgJEhgKCm1ldHJpY19rZXkYAiABKAlCBPiGGQEa",
            "KwoIUmVzcG9uc2USHwoHbWV0cmljcxgBIAMoCzIOLm1sZmxvdy5NZXRyaWM6",
            "K+I/KAomY29tLmRhdGFicmlja3MucnBjLlJQQ1skdGhpcy5SZXNwb25zZV0i",
            "sQEKCExvZ0JhdGNoEg4KBnJ1bl9pZBgBIAEoCRIfCgdtZXRyaWNzGAIgAygL",
            "Mg4ubWxmbG93Lk1ldHJpYxIdCgZwYXJhbXMYAyADKAsyDS5tbGZsb3cuUGFy",
            "YW0SHAoEdGFncxgEIAMoCzIOLm1sZmxvdy5SdW5UYWcaCgoIUmVzcG9uc2U6",
            "K+I/KAomY29tLmRhdGFicmlja3MucnBjLlJQQ1skdGhpcy5SZXNwb25zZV0i",
            "ZwoITG9nTW9kZWwSDgoGcnVuX2lkGAEgASgJEhIKCm1vZGVsX2pzb24YAiAB",
            "KAkaCgoIUmVzcG9uc2U6K+I/KAomY29tLmRhdGFicmlja3MucnBjLlJQQ1sk",
            "dGhpcy5SZXNwb25zZV0ilQEKE0dldEV4cGVyaW1lbnRCeU5hbWUSHQoPZXhw",
            "ZXJpbWVudF9uYW1lGAEgASgJQgT4hhkBGjIKCFJlc3BvbnNlEiYKCmV4cGVy",
            "aW1lbnQYASABKAsyEi5tbGZsb3cuRXhwZXJpbWVudDor4j8oCiZjb20uZGF0",
            "YWJyaWNrcy5ycGMuUlBDWyR0aGlzLlJlc3BvbnNlXSo2CghWaWV3VHlwZRIP",
            "CgtBQ1RJVkVfT05MWRAAEhAKDERFTEVURURfT05MWRABEgcKA0FMTBACKkkK",
            "ClNvdXJjZVR5cGUSDAoITk9URUJPT0sQABIHCgNKT0IQARILCgdQUk9KRUNU",
            "EAISCQoFTE9DQUwQAxIMCgdVTktOT1dOEOgHKk0KCVJ1blN0YXR1cxILCgdS",
            "VU5OSU5HEAASDQoJU0NIRURVTEVEEAESDAoIRklOSVNIRUQQAhIKCgZGQUlM",
            "RUQQAxIKCgZLSUxMRUQQBDLcHQoNTWxmbG93U2VydmljZRKiAQoTZ2V0RXhw",
            "ZXJpbWVudEJ5TmFtZRIbLm1sZmxvdy5HZXRFeHBlcmltZW50QnlOYW1lGiQu",
            "bWxmbG93LkdldEV4cGVyaW1lbnRCeU5hbWUuUmVzcG9uc2UiSPKGGUQKKgoD",
            "R0VUEh8vbWxmbG93L2V4cGVyaW1lbnRzL2dldC1ieS1uYW1lGgIIAioWR2V0",
            "IEV4cGVyaW1lbnQgQnkgTmFtZRLAAQoQY3JlYXRlRXhwZXJpbWVudBIYLm1s",
            "Zmxvdy5DcmVhdGVFeHBlcmltZW50GiEubWxmbG93LkNyZWF0ZUV4cGVyaW1l",
            "bnQuUmVzcG9uc2Uib/KGGWsKJgoEUE9TVBIaL21sZmxvdy9leHBlcmltZW50",
            "cy9jcmVhdGUaAggCCi4KBFBPU1QSIi9wcmV2aWV3L21sZmxvdy9leHBlcmlt",
            "ZW50cy9jcmVhdGUaAggCKhFDcmVhdGUgRXhwZXJpbWVudBK2AQoPbGlzdEV4",
            "cGVyaW1lbnRzEhcubWxmbG93Lkxpc3RFeHBlcmltZW50cxogLm1sZmxvdy5M",
            "aXN0RXhwZXJpbWVudHMuUmVzcG9uc2UiaPKGGWQKIwoDR0VUEhgvbWxmbG93",
            "L2V4cGVyaW1lbnRzL2xpc3QaAggCCisKA0dFVBIgL3ByZXZpZXcvbWxmbG93",
            "L2V4cGVyaW1lbnRzL2xpc3QaAggCKhBMaXN0IEV4cGVyaW1lbnRzEqwBCg1n",
            "ZXRFeHBlcmltZW50EhUubWxmbG93LkdldEV4cGVyaW1lbnQaHi5tbGZsb3cu",
            "R2V0RXhwZXJpbWVudC5SZXNwb25zZSJk8oYZYAoiCgNHRVQSFy9tbGZsb3cv",
            "ZXhwZXJpbWVudHMvZ2V0GgIIAgoqCgNHRVQSHy9wcmV2aWV3L21sZmxvdy9l",
            "eHBlcmltZW50cy9nZXQaAggCKg5HZXQgRXhwZXJpbWVudBLAAQoQZGVsZXRl",
            "RXhwZXJpbWVudBIYLm1sZmxvdy5EZWxldGVFeHBlcmltZW50GiEubWxmbG93",
            "LkRlbGV0ZUV4cGVyaW1lbnQuUmVzcG9uc2Uib/KGGWsKJgoEUE9TVBIaL21s",
            "Zmxvdy9leHBlcmltZW50cy9kZWxldGUaAggCCi4KBFBPU1QSIi9wcmV2aWV3",
            "L21sZmxvdy9leHBlcmltZW50cy9kZWxldGUaAggCKhFEZWxldGUgRXhwZXJp",
            "bWVudBLGAQoRcmVzdG9yZUV4cGVyaW1lbnQSGS5tbGZsb3cuUmVzdG9yZUV4",
            "cGVyaW1lbnQaIi5tbGZsb3cuUmVzdG9yZUV4cGVyaW1lbnQuUmVzcG9uc2Ui",
            "cvKGGW4KJwoEUE9TVBIbL21sZmxvdy9leHBlcmltZW50cy9yZXN0b3JlGgII",
            "AgovCgRQT1NUEiMvcHJldmlldy9tbGZsb3cvZXhwZXJpbWVudHMvcmVzdG9y",
            "ZRoCCAIqElJlc3RvcmUgRXhwZXJpbWVudBLAAQoQdXBkYXRlRXhwZXJpbWVu",
            "dBIYLm1sZmxvdy5VcGRhdGVFeHBlcmltZW50GiEubWxmbG93LlVwZGF0ZUV4",
            "cGVyaW1lbnQuUmVzcG9uc2Uib/KGGWsKJgoEUE9TVBIaL21sZmxvdy9leHBl",
            "cmltZW50cy91cGRhdGUaAggCCi4KBFBPU1QSIi9wcmV2aWV3L21sZmxvdy9l",
            "eHBlcmltZW50cy91cGRhdGUaAggCKhFVcGRhdGUgRXhwZXJpbWVudBKWAQoJ",
            "Y3JlYXRlUnVuEhEubWxmbG93LkNyZWF0ZVJ1bhoaLm1sZmxvdy5DcmVhdGVS",
            "dW4uUmVzcG9uc2UiWvKGGVYKHwoEUE9TVBITL21sZmxvdy9ydW5zL2NyZWF0",
            "ZRoCCAIKJwoEUE9TVBIbL3ByZXZpZXcvbWxmbG93L3J1bnMvY3JlYXRlGgII",
            "AioKQ3JlYXRlIFJ1bhKWAQoJdXBkYXRlUnVuEhEubWxmbG93LlVwZGF0ZVJ1",
            "bhoaLm1sZmxvdy5VcGRhdGVSdW4uUmVzcG9uc2UiWvKGGVYKHwoEUE9TVBIT",
            "L21sZmxvdy9ydW5zL3VwZGF0ZRoCCAIKJwoEUE9TVBIbL3ByZXZpZXcvbWxm",
            "bG93L3J1bnMvdXBkYXRlGgIIAioKVXBkYXRlIFJ1bhKWAQoJZGVsZXRlUnVu",
            "EhEubWxmbG93LkRlbGV0ZVJ1bhoaLm1sZmxvdy5EZWxldGVSdW4uUmVzcG9u",
            "c2UiWvKGGVYKHwoEUE9TVBITL21sZmxvdy9ydW5zL2RlbGV0ZRoCCAIKJwoE",
            "UE9TVBIbL3ByZXZpZXcvbWxmbG93L3J1bnMvZGVsZXRlGgIIAioKRGVsZXRl",
            "IFJ1bhKcAQoKcmVzdG9yZVJ1bhISLm1sZmxvdy5SZXN0b3JlUnVuGhsubWxm",
            "bG93LlJlc3RvcmVSdW4uUmVzcG9uc2UiXfKGGVkKIAoEUE9TVBIUL21sZmxv",
            "dy9ydW5zL3Jlc3RvcmUaAggCCigKBFBPU1QSHC9wcmV2aWV3L21sZmxvdy9y",
            "dW5zL3Jlc3RvcmUaAggCKgtSZXN0b3JlIFJ1bhKeAQoJbG9nTWV0cmljEhEu",
            "bWxmbG93LkxvZ01ldHJpYxoaLm1sZmxvdy5Mb2dNZXRyaWMuUmVzcG9uc2Ui",
            "YvKGGV4KIwoEUE9TVBIXL21sZmxvdy9ydW5zL2xvZy1tZXRyaWMaAggCCisK",
            "BFBPU1QSHy9wcmV2aWV3L21sZmxvdy9ydW5zL2xvZy1tZXRyaWMaAggCKgpM",
            "b2cgTWV0cmljEqABCghsb2dQYXJhbRIQLm1sZmxvdy5Mb2dQYXJhbRoZLm1s",
            "Zmxvdy5Mb2dQYXJhbS5SZXNwb25zZSJn8oYZYwomCgRQT1NUEhovbWxmbG93",
            "L3J1bnMvbG9nLXBhcmFtZXRlchoCCAIKLgoEUE9TVBIiL3ByZXZpZXcvbWxm",
            "bG93L3J1bnMvbG9nLXBhcmFtZXRlchoCCAIqCUxvZyBQYXJhbRLbAQoQc2V0",
            "RXhwZXJpbWVudFRhZxIYLm1sZmxvdy5TZXRFeHBlcmltZW50VGFnGiEubWxm",
            "bG93LlNldEV4cGVyaW1lbnRUYWcuUmVzcG9uc2UiiQHyhhmEAQoyCgRQT1NU",
            "EiYvbWxmbG93L2V4cGVyaW1lbnRzL3NldC1leHBlcmltZW50LXRhZxoCCAIK",
            "OgoEUE9TVBIuL3ByZXZpZXcvbWxmbG93L2V4cGVyaW1lbnRzL3NldC1leHBl",
            "cmltZW50LXRhZxoCCAIqElNldCBFeHBlcmltZW50IFRhZxKMAQoGc2V0VGFn",
            "Eg4ubWxmbG93LlNldFRhZxoXLm1sZmxvdy5TZXRUYWcuUmVzcG9uc2UiWfKG",
            "GVUKIAoEUE9TVBIUL21sZmxvdy9ydW5zL3NldC10YWcaAggCCigKBFBPU1QS",
            "HC9wcmV2aWV3L21sZmxvdy9ydW5zL3NldC10YWcaAggCKgdTZXQgVGFnEp4B",
            "CglkZWxldGVUYWcSES5tbGZsb3cuRGVsZXRlVGFnGhoubWxmbG93LkRlbGV0",
            "ZVRhZy5SZXNwb25zZSJi8oYZXgojCgRQT1NUEhcvbWxmbG93L3J1bnMvZGVs",
            "ZXRlLXRhZxoCCAIKKwoEUE9TVBIfL3ByZXZpZXcvbWxmbG93L3J1bnMvZGVs",
            "ZXRlLXRhZxoCCAIqCkRlbGV0ZSBUYWcSggEKBmdldFJ1bhIOLm1sZmxvdy5H",
            "ZXRSdW4aFy5tbGZsb3cuR2V0UnVuLlJlc3BvbnNlIk/yhhlLChsKA0dFVBIQ",
            "L21sZmxvdy9ydW5zL2dldBoCCAIKIwoDR0VUEhgvcHJldmlldy9tbGZsb3cv",
            "cnVucy9nZXQaAggCKgdHZXQgUnVuEsMBCgpzZWFyY2hSdW5zEhIubWxmbG93",
            "LlNlYXJjaFJ1bnMaGy5tbGZsb3cuU2VhcmNoUnVucy5SZXNwb25zZSKDAfKG",
            "GX8KHwoEUE9TVBITL21sZmxvdy9ydW5zL3NlYXJjaBoCCAIKJwoEUE9TVBIb",
            "L3ByZXZpZXcvbWxmbG93L3J1bnMvc2VhcmNoGgIIAgomCgNHRVQSGy9wcmV2",
            "aWV3L21sZmxvdy9ydW5zL3NlYXJjaBoCCAIqC1NlYXJjaCBSdW5zEqoBCg1s",
            "aXN0QXJ0aWZhY3RzEhUubWxmbG93Lkxpc3RBcnRpZmFjdHMaHi5tbGZsb3cu",
            "TGlzdEFydGlmYWN0cy5SZXNwb25zZSJi8oYZXgohCgNHRVQSFi9tbGZsb3cv",
            "YXJ0aWZhY3RzL2xpc3QaAggCCikKA0dFVBIeL3ByZXZpZXcvbWxmbG93L2Fy",
            "dGlmYWN0cy9saXN0GgIIAioOTGlzdCBBcnRpZmFjdHMSwQEKEGdldE1ldHJp",
            "Y0hpc3RvcnkSGC5tbGZsb3cuR2V0TWV0cmljSGlzdG9yeRohLm1sZmxvdy5H",
            "ZXRNZXRyaWNIaXN0b3J5LlJlc3BvbnNlInDyhhlsCiYKA0dFVBIbL21sZmxv",
            "dy9tZXRyaWNzL2dldC1oaXN0b3J5GgIIAgouCgNHRVQSIy9wcmV2aWV3L21s",
            "Zmxvdy9tZXRyaWNzL2dldC1oaXN0b3J5GgIIAioSR2V0IE1ldHJpYyBIaXN0",
            "b3J5EpgBCghsb2dCYXRjaBIQLm1sZmxvdy5Mb2dCYXRjaBoZLm1sZmxvdy5M",
            "b2dCYXRjaC5SZXNwb25zZSJf8oYZWwoiCgRQT1NUEhYvbWxmbG93L3J1bnMv",
            "bG9nLWJhdGNoGgIIAgoqCgRQT1NUEh4vcHJldmlldy9tbGZsb3cvcnVucy9s",
            "b2ctYmF0Y2gaAggCKglMb2cgQmF0Y2gSmAEKCGxvZ01vZGVsEhAubWxmbG93",
            "LkxvZ01vZGVsGhkubWxmbG93LkxvZ01vZGVsLlJlc3BvbnNlIl/yhhlbCiIK",
            "BFBPU1QSFi9tbGZsb3cvcnVucy9sb2ctbW9kZWwaAggCCioKBFBPU1QSHi9w",
            "cmV2aWV3L21sZmxvdy9ydW5zL2xvZy1tb2RlbBoCCAIqCUxvZyBNb2RlbEIe",
            "ChRvcmcubWxmbG93LmFwaS5wcm90b5ABAeI/AhABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Scalapb.ScalapbReflection.Descriptor, global::Mlflow.DatabricksReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Mlflow.ViewType), typeof(global::Mlflow.SourceType), typeof(global::Mlflow.RunStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.Metric), global::Mlflow.Metric.Parser, new[]{ "Key", "Value", "Timestamp", "Step" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.Param), global::Mlflow.Param.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.Run), global::Mlflow.Run.Parser, new[]{ "Info", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.RunData), global::Mlflow.RunData.Parser, new[]{ "Metrics", "Params", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.RunTag), global::Mlflow.RunTag.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.ExperimentTag), global::Mlflow.ExperimentTag.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.RunInfo), global::Mlflow.RunInfo.Parser, new[]{ "RunId", "RunUuid", "ExperimentId", "UserId", "Status", "StartTime", "EndTime", "ArtifactUri", "LifecycleStage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.Experiment), global::Mlflow.Experiment.Parser, new[]{ "ExperimentId", "Name", "ArtifactLocation", "LifecycleStage", "LastUpdateTime", "CreationTime", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.CreateExperiment), global::Mlflow.CreateExperiment.Parser, new[]{ "Name", "ArtifactLocation" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.CreateExperiment.Types.Response), global::Mlflow.CreateExperiment.Types.Response.Parser, new[]{ "ExperimentId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.ListExperiments), global::Mlflow.ListExperiments.Parser, new[]{ "ViewType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.ListExperiments.Types.Response), global::Mlflow.ListExperiments.Types.Response.Parser, new[]{ "Experiments" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.GetExperiment), global::Mlflow.GetExperiment.Parser, new[]{ "ExperimentId" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.GetExperiment.Types.Response), global::Mlflow.GetExperiment.Types.Response.Parser, new[]{ "Experiment", "Runs" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.DeleteExperiment), global::Mlflow.DeleteExperiment.Parser, new[]{ "ExperimentId" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.DeleteExperiment.Types.Response), global::Mlflow.DeleteExperiment.Types.Response.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.RestoreExperiment), global::Mlflow.RestoreExperiment.Parser, new[]{ "ExperimentId" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.RestoreExperiment.Types.Response), global::Mlflow.RestoreExperiment.Types.Response.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.UpdateExperiment), global::Mlflow.UpdateExperiment.Parser, new[]{ "ExperimentId", "NewName" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.UpdateExperiment.Types.Response), global::Mlflow.UpdateExperiment.Types.Response.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.CreateRun), global::Mlflow.CreateRun.Parser, new[]{ "ExperimentId", "UserId", "StartTime", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.CreateRun.Types.Response), global::Mlflow.CreateRun.Types.Response.Parser, new[]{ "Run" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.UpdateRun), global::Mlflow.UpdateRun.Parser, new[]{ "RunId", "RunUuid", "Status", "EndTime" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.UpdateRun.Types.Response), global::Mlflow.UpdateRun.Types.Response.Parser, new[]{ "RunInfo" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.DeleteRun), global::Mlflow.DeleteRun.Parser, new[]{ "RunId" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.DeleteRun.Types.Response), global::Mlflow.DeleteRun.Types.Response.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.RestoreRun), global::Mlflow.RestoreRun.Parser, new[]{ "RunId" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.RestoreRun.Types.Response), global::Mlflow.RestoreRun.Types.Response.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.LogMetric), global::Mlflow.LogMetric.Parser, new[]{ "RunId", "RunUuid", "Key", "Value", "Timestamp", "Step" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.LogMetric.Types.Response), global::Mlflow.LogMetric.Types.Response.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.LogParam), global::Mlflow.LogParam.Parser, new[]{ "RunId", "RunUuid", "Key", "Value" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.LogParam.Types.Response), global::Mlflow.LogParam.Types.Response.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.SetExperimentTag), global::Mlflow.SetExperimentTag.Parser, new[]{ "ExperimentId", "Key", "Value" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.SetExperimentTag.Types.Response), global::Mlflow.SetExperimentTag.Types.Response.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.SetTag), global::Mlflow.SetTag.Parser, new[]{ "RunId", "RunUuid", "Key", "Value" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.SetTag.Types.Response), global::Mlflow.SetTag.Types.Response.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.DeleteTag), global::Mlflow.DeleteTag.Parser, new[]{ "RunId", "Key" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.DeleteTag.Types.Response), global::Mlflow.DeleteTag.Types.Response.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.GetRun), global::Mlflow.GetRun.Parser, new[]{ "RunId", "RunUuid" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.GetRun.Types.Response), global::Mlflow.GetRun.Types.Response.Parser, new[]{ "Run" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.SearchRuns), global::Mlflow.SearchRuns.Parser, new[]{ "ExperimentIds", "Filter", "RunViewType", "MaxResults", "OrderBy", "PageToken" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.SearchRuns.Types.Response), global::Mlflow.SearchRuns.Types.Response.Parser, new[]{ "Runs", "NextPageToken" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.ListArtifacts), global::Mlflow.ListArtifacts.Parser, new[]{ "RunId", "RunUuid", "Path", "PageToken" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.ListArtifacts.Types.Response), global::Mlflow.ListArtifacts.Types.Response.Parser, new[]{ "RootUri", "Files", "NextPageToken" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.FileInfo), global::Mlflow.FileInfo.Parser, new[]{ "Path", "IsDir", "FileSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.GetMetricHistory), global::Mlflow.GetMetricHistory.Parser, new[]{ "RunId", "RunUuid", "MetricKey" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.GetMetricHistory.Types.Response), global::Mlflow.GetMetricHistory.Types.Response.Parser, new[]{ "Metrics" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.LogBatch), global::Mlflow.LogBatch.Parser, new[]{ "RunId", "Metrics", "Params", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.LogBatch.Types.Response), global::Mlflow.LogBatch.Types.Response.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.LogModel), global::Mlflow.LogModel.Parser, new[]{ "RunId", "ModelJson" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.LogModel.Types.Response), global::Mlflow.LogModel.Types.Response.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.GetExperimentByName), global::Mlflow.GetExperimentByName.Parser, new[]{ "ExperimentName" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mlflow.GetExperimentByName.Types.Response), global::Mlflow.GetExperimentByName.Types.Response.Parser, new[]{ "Experiment" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// View type for ListExperiments query.
  /// </summary>
  public enum ViewType {
    /// <summary>
    /// Default. Return only active experiments.
    /// </summary>
    [pbr::OriginalName("ACTIVE_ONLY")] ActiveOnly = 0,
    /// <summary>
    /// Return only deleted experiments.
    /// </summary>
    [pbr::OriginalName("DELETED_ONLY")] DeletedOnly = 1,
    /// <summary>
    /// Get all experiments.
    /// </summary>
    [pbr::OriginalName("ALL")] All = 2,
  }

  /// <summary>
  /// Source that generated a run.
  /// </summary>
  public enum SourceType {
    /// <summary>
    /// Databricks notebook environment.
    /// </summary>
    [pbr::OriginalName("NOTEBOOK")] Notebook = 0,
    /// <summary>
    /// Scheduled or Run Now job.
    /// </summary>
    [pbr::OriginalName("JOB")] Job = 1,
    /// <summary>
    /// As a prepackaged project: either a Docker image or GitHub source, etc.
    /// </summary>
    [pbr::OriginalName("PROJECT")] Project = 2,
    /// <summary>
    /// Local run: Using CLI, IDE, or local notebook.
    /// </summary>
    [pbr::OriginalName("LOCAL")] Local = 3,
    /// <summary>
    /// Unknown source type.
    /// </summary>
    [pbr::OriginalName("UNKNOWN")] Unknown = 1000,
  }

  /// <summary>
  /// Status of a run.
  /// </summary>
  public enum RunStatus {
    /// <summary>
    /// Run has been initiated.
    /// </summary>
    [pbr::OriginalName("RUNNING")] Running = 0,
    /// <summary>
    /// Run is scheduled to run at a later time.
    /// </summary>
    [pbr::OriginalName("SCHEDULED")] Scheduled = 1,
    /// <summary>
    /// Run has completed.
    /// </summary>
    [pbr::OriginalName("FINISHED")] Finished = 2,
    /// <summary>
    /// Run execution failed.
    /// </summary>
    [pbr::OriginalName("FAILED")] Failed = 3,
    /// <summary>
    /// Run killed by user.
    /// </summary>
    [pbr::OriginalName("KILLED")] Killed = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Metric associated with a run, represented as a key-value pair.
  /// </summary>
  public sealed partial class Metric : pb::IMessage<Metric> {
    private static readonly pb::MessageParser<Metric> _parser = new pb::MessageParser<Metric>(() => new Metric());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric(Metric other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      timestamp_ = other.timestamp_;
      step_ = other.step_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metric Clone() {
      return new Metric(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// Key identifying this metric.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private double value_;
    /// <summary>
    /// Value associated with this metric.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    /// <summary>
    /// The timestamp at which this metric was recorded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 4;
    private long step_;
    /// <summary>
    /// Step at which to log the metric.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Step != other.Step) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Step != 0L) hash ^= Step.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (Step != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Step);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Step != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Step);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metric other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Step != 0L) {
        Step = other.Step;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 32: {
            Step = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Param associated with a run.
  /// </summary>
  public sealed partial class Param : pb::IMessage<Param> {
    private static readonly pb::MessageParser<Param> _parser = new pb::MessageParser<Param>(() => new Param());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Param> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Param() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Param(Param other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Param Clone() {
      return new Param(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// Key identifying this param.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// Value associated with this param.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Param);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Param other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Param other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A single run.
  /// </summary>
  public sealed partial class Run : pb::IMessage<Run> {
    private static readonly pb::MessageParser<Run> _parser = new pb::MessageParser<Run>(() => new Run());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Run> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Run() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Run(Run other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Run Clone() {
      return new Run(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Mlflow.RunInfo info_;
    /// <summary>
    /// Run metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mlflow.RunInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Mlflow.RunData data_;
    /// <summary>
    /// Run data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mlflow.RunData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Run);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Run other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Run other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Mlflow.RunInfo();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Mlflow.RunData();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Mlflow.RunInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::Mlflow.RunData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Run data (metrics, params, and tags).
  /// </summary>
  public sealed partial class RunData : pb::IMessage<RunData> {
    private static readonly pb::MessageParser<RunData> _parser = new pb::MessageParser<RunData>(() => new RunData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunData(RunData other) : this() {
      metrics_ = other.metrics_.Clone();
      params_ = other.params_.Clone();
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunData Clone() {
      return new RunData(this);
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Mlflow.Metric> _repeated_metrics_codec
        = pb::FieldCodec.ForMessage(10, global::Mlflow.Metric.Parser);
    private readonly pbc::RepeatedField<global::Mlflow.Metric> metrics_ = new pbc::RepeatedField<global::Mlflow.Metric>();
    /// <summary>
    /// Run metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mlflow.Metric> Metrics {
      get { return metrics_; }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Mlflow.Param> _repeated_params_codec
        = pb::FieldCodec.ForMessage(18, global::Mlflow.Param.Parser);
    private readonly pbc::RepeatedField<global::Mlflow.Param> params_ = new pbc::RepeatedField<global::Mlflow.Param>();
    /// <summary>
    /// Run parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mlflow.Param> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Mlflow.RunTag> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(26, global::Mlflow.RunTag.Parser);
    private readonly pbc::RepeatedField<global::Mlflow.RunTag> tags_ = new pbc::RepeatedField<global::Mlflow.RunTag>();
    /// <summary>
    /// Additional metadata key-value pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mlflow.RunTag> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!metrics_.Equals(other.metrics_)) return false;
      if(!params_.Equals(other.params_)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= metrics_.GetHashCode();
      hash ^= params_.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      metrics_.WriteTo(output, _repeated_metrics_codec);
      params_.WriteTo(output, _repeated_params_codec);
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += metrics_.CalculateSize(_repeated_metrics_codec);
      size += params_.CalculateSize(_repeated_params_codec);
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunData other) {
      if (other == null) {
        return;
      }
      metrics_.Add(other.metrics_);
      params_.Add(other.params_);
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
            break;
          }
          case 18: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 26: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Tag for a run.
  /// </summary>
  public sealed partial class RunTag : pb::IMessage<RunTag> {
    private static readonly pb::MessageParser<RunTag> _parser = new pb::MessageParser<RunTag>(() => new RunTag());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunTag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunTag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunTag(RunTag other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunTag Clone() {
      return new RunTag(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// The tag key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// The tag value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunTag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunTag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunTag other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Tag for an experiment.
  /// </summary>
  public sealed partial class ExperimentTag : pb::IMessage<ExperimentTag> {
    private static readonly pb::MessageParser<ExperimentTag> _parser = new pb::MessageParser<ExperimentTag>(() => new ExperimentTag());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExperimentTag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperimentTag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperimentTag(ExperimentTag other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperimentTag Clone() {
      return new ExperimentTag(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// The tag key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// The tag value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExperimentTag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExperimentTag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExperimentTag other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Metadata of a single run.
  /// </summary>
  public sealed partial class RunInfo : pb::IMessage<RunInfo> {
    private static readonly pb::MessageParser<RunInfo> _parser = new pb::MessageParser<RunInfo>(() => new RunInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunInfo(RunInfo other) : this() {
      runId_ = other.runId_;
      runUuid_ = other.runUuid_;
      experimentId_ = other.experimentId_;
      userId_ = other.userId_;
      status_ = other.status_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      artifactUri_ = other.artifactUri_;
      lifecycleStage_ = other.lifecycleStage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunInfo Clone() {
      return new RunInfo(this);
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 15;
    private string runId_ = "";
    /// <summary>
    /// Unique identifier for the run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run_uuid" field.</summary>
    public const int RunUuidFieldNumber = 1;
    private string runUuid_ = "";
    /// <summary>
    /// [Deprecated, use run_id instead] Unique identifier for the run. This field will
    /// be removed in a future MLflow version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunUuid {
      get { return runUuid_; }
      set {
        runUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "experiment_id" field.</summary>
    public const int ExperimentIdFieldNumber = 2;
    private string experimentId_ = "";
    /// <summary>
    /// The experiment ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExperimentId {
      get { return experimentId_; }
      set {
        experimentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 6;
    private string userId_ = "";
    /// <summary>
    /// User who initiated the run.
    /// This field is deprecated as of MLflow 1.0, and will be removed in a future
    /// MLflow release. Use 'mlflow.user' tag instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::Mlflow.RunStatus status_ = 0;
    /// <summary>
    /// Current status of the run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mlflow.RunStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 8;
    private long startTime_;
    /// <summary>
    /// Unix timestamp of when the run started in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 9;
    private long endTime_;
    /// <summary>
    /// Unix timestamp of when the run ended in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "artifact_uri" field.</summary>
    public const int ArtifactUriFieldNumber = 13;
    private string artifactUri_ = "";
    /// <summary>
    /// URI of the directory where artifacts should be uploaded.
    /// This can be a local path (starting with "/"), or a distributed file system (DFS)
    /// path, like ``s3://bucket/directory`` or ``dbfs:/my/directory``.
    /// If not set, the local ``./mlruns`` directory is  chosen.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArtifactUri {
      get { return artifactUri_; }
      set {
        artifactUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lifecycle_stage" field.</summary>
    public const int LifecycleStageFieldNumber = 14;
    private string lifecycleStage_ = "";
    /// <summary>
    /// Current life cycle stage of the experiment : OneOf("active", "deleted")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LifecycleStage {
      get { return lifecycleStage_; }
      set {
        lifecycleStage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunId != other.RunId) return false;
      if (RunUuid != other.RunUuid) return false;
      if (ExperimentId != other.ExperimentId) return false;
      if (UserId != other.UserId) return false;
      if (Status != other.Status) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (ArtifactUri != other.ArtifactUri) return false;
      if (LifecycleStage != other.LifecycleStage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      if (RunUuid.Length != 0) hash ^= RunUuid.GetHashCode();
      if (ExperimentId.Length != 0) hash ^= ExperimentId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (ArtifactUri.Length != 0) hash ^= ArtifactUri.GetHashCode();
      if (LifecycleStage.Length != 0) hash ^= LifecycleStage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunUuid);
      }
      if (ExperimentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExperimentId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserId);
      }
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(EndTime);
      }
      if (ArtifactUri.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ArtifactUri);
      }
      if (LifecycleStage.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(LifecycleStage);
      }
      if (RunId.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(RunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      if (RunUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunUuid);
      }
      if (ExperimentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExperimentId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (ArtifactUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArtifactUri);
      }
      if (LifecycleStage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LifecycleStage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunInfo other) {
      if (other == null) {
        return;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      if (other.RunUuid.Length != 0) {
        RunUuid = other.RunUuid;
      }
      if (other.ExperimentId.Length != 0) {
        ExperimentId = other.ExperimentId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.ArtifactUri.Length != 0) {
        ArtifactUri = other.ArtifactUri;
      }
      if (other.LifecycleStage.Length != 0) {
        LifecycleStage = other.LifecycleStage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RunUuid = input.ReadString();
            break;
          }
          case 18: {
            ExperimentId = input.ReadString();
            break;
          }
          case 50: {
            UserId = input.ReadString();
            break;
          }
          case 56: {
            status_ = (global::Mlflow.RunStatus) input.ReadEnum();
            break;
          }
          case 64: {
            StartTime = input.ReadInt64();
            break;
          }
          case 72: {
            EndTime = input.ReadInt64();
            break;
          }
          case 106: {
            ArtifactUri = input.ReadString();
            break;
          }
          case 114: {
            LifecycleStage = input.ReadString();
            break;
          }
          case 122: {
            RunId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Experiment
  /// </summary>
  public sealed partial class Experiment : pb::IMessage<Experiment> {
    private static readonly pb::MessageParser<Experiment> _parser = new pb::MessageParser<Experiment>(() => new Experiment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Experiment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Experiment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Experiment(Experiment other) : this() {
      experimentId_ = other.experimentId_;
      name_ = other.name_;
      artifactLocation_ = other.artifactLocation_;
      lifecycleStage_ = other.lifecycleStage_;
      lastUpdateTime_ = other.lastUpdateTime_;
      creationTime_ = other.creationTime_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Experiment Clone() {
      return new Experiment(this);
    }

    /// <summary>Field number for the "experiment_id" field.</summary>
    public const int ExperimentIdFieldNumber = 1;
    private string experimentId_ = "";
    /// <summary>
    /// Unique identifier for the experiment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExperimentId {
      get { return experimentId_; }
      set {
        experimentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Human readable name that identifies the experiment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifact_location" field.</summary>
    public const int ArtifactLocationFieldNumber = 3;
    private string artifactLocation_ = "";
    /// <summary>
    /// Location where artifacts for the experiment are stored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArtifactLocation {
      get { return artifactLocation_; }
      set {
        artifactLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lifecycle_stage" field.</summary>
    public const int LifecycleStageFieldNumber = 4;
    private string lifecycleStage_ = "";
    /// <summary>
    /// Current life cycle stage of the experiment: "active" or "deleted".
    /// Deleted experiments are not returned by APIs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LifecycleStage {
      get { return lifecycleStage_; }
      set {
        lifecycleStage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_update_time" field.</summary>
    public const int LastUpdateTimeFieldNumber = 5;
    private long lastUpdateTime_;
    /// <summary>
    /// Last update time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastUpdateTime {
      get { return lastUpdateTime_; }
      set {
        lastUpdateTime_ = value;
      }
    }

    /// <summary>Field number for the "creation_time" field.</summary>
    public const int CreationTimeFieldNumber = 6;
    private long creationTime_;
    /// <summary>
    /// Creation time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationTime {
      get { return creationTime_; }
      set {
        creationTime_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Mlflow.ExperimentTag> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(58, global::Mlflow.ExperimentTag.Parser);
    private readonly pbc::RepeatedField<global::Mlflow.ExperimentTag> tags_ = new pbc::RepeatedField<global::Mlflow.ExperimentTag>();
    /// <summary>
    /// Tags: Additional metadata key-value pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mlflow.ExperimentTag> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Experiment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Experiment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExperimentId != other.ExperimentId) return false;
      if (Name != other.Name) return false;
      if (ArtifactLocation != other.ArtifactLocation) return false;
      if (LifecycleStage != other.LifecycleStage) return false;
      if (LastUpdateTime != other.LastUpdateTime) return false;
      if (CreationTime != other.CreationTime) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExperimentId.Length != 0) hash ^= ExperimentId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ArtifactLocation.Length != 0) hash ^= ArtifactLocation.GetHashCode();
      if (LifecycleStage.Length != 0) hash ^= LifecycleStage.GetHashCode();
      if (LastUpdateTime != 0L) hash ^= LastUpdateTime.GetHashCode();
      if (CreationTime != 0L) hash ^= CreationTime.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExperimentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExperimentId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ArtifactLocation.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ArtifactLocation);
      }
      if (LifecycleStage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LifecycleStage);
      }
      if (LastUpdateTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastUpdateTime);
      }
      if (CreationTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CreationTime);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExperimentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExperimentId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ArtifactLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArtifactLocation);
      }
      if (LifecycleStage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LifecycleStage);
      }
      if (LastUpdateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastUpdateTime);
      }
      if (CreationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationTime);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Experiment other) {
      if (other == null) {
        return;
      }
      if (other.ExperimentId.Length != 0) {
        ExperimentId = other.ExperimentId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ArtifactLocation.Length != 0) {
        ArtifactLocation = other.ArtifactLocation;
      }
      if (other.LifecycleStage.Length != 0) {
        LifecycleStage = other.LifecycleStage;
      }
      if (other.LastUpdateTime != 0L) {
        LastUpdateTime = other.LastUpdateTime;
      }
      if (other.CreationTime != 0L) {
        CreationTime = other.CreationTime;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExperimentId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            ArtifactLocation = input.ReadString();
            break;
          }
          case 34: {
            LifecycleStage = input.ReadString();
            break;
          }
          case 40: {
            LastUpdateTime = input.ReadInt64();
            break;
          }
          case 48: {
            CreationTime = input.ReadInt64();
            break;
          }
          case 58: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateExperiment : pb::IMessage<CreateExperiment> {
    private static readonly pb::MessageParser<CreateExperiment> _parser = new pb::MessageParser<CreateExperiment>(() => new CreateExperiment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateExperiment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateExperiment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateExperiment(CreateExperiment other) : this() {
      name_ = other.name_;
      artifactLocation_ = other.artifactLocation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateExperiment Clone() {
      return new CreateExperiment(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Experiment name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifact_location" field.</summary>
    public const int ArtifactLocationFieldNumber = 2;
    private string artifactLocation_ = "";
    /// <summary>
    /// Location where all artifacts for the experiment are stored.
    /// If not provided, the remote server will select an appropriate default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArtifactLocation {
      get { return artifactLocation_; }
      set {
        artifactLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateExperiment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateExperiment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ArtifactLocation != other.ArtifactLocation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ArtifactLocation.Length != 0) hash ^= ArtifactLocation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ArtifactLocation.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ArtifactLocation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ArtifactLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArtifactLocation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateExperiment other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ArtifactLocation.Length != 0) {
        ArtifactLocation = other.ArtifactLocation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ArtifactLocation = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CreateExperiment message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.CreateExperiment.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          experimentId_ = other.experimentId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        /// <summary>Field number for the "experiment_id" field.</summary>
        public const int ExperimentIdFieldNumber = 1;
        private string experimentId_ = "";
        /// <summary>
        /// Unique identifier for the experiment.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ExperimentId {
          get { return experimentId_; }
          set {
            experimentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ExperimentId != other.ExperimentId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ExperimentId.Length != 0) hash ^= ExperimentId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ExperimentId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ExperimentId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ExperimentId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ExperimentId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          if (other.ExperimentId.Length != 0) {
            ExperimentId = other.ExperimentId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ExperimentId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ListExperiments : pb::IMessage<ListExperiments> {
    private static readonly pb::MessageParser<ListExperiments> _parser = new pb::MessageParser<ListExperiments>(() => new ListExperiments());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListExperiments> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListExperiments() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListExperiments(ListExperiments other) : this() {
      viewType_ = other.viewType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListExperiments Clone() {
      return new ListExperiments(this);
    }

    /// <summary>Field number for the "view_type" field.</summary>
    public const int ViewTypeFieldNumber = 1;
    private global::Mlflow.ViewType viewType_ = 0;
    /// <summary>
    /// Qualifier for type of experiments to be returned.
    /// If unspecified, return only active experiments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mlflow.ViewType ViewType {
      get { return viewType_; }
      set {
        viewType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListExperiments);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListExperiments other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ViewType != other.ViewType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ViewType != 0) hash ^= ViewType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ViewType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ViewType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ViewType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ViewType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListExperiments other) {
      if (other == null) {
        return;
      }
      if (other.ViewType != 0) {
        ViewType = other.ViewType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            viewType_ = (global::Mlflow.ViewType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ListExperiments message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.ListExperiments.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          experiments_ = other.experiments_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        /// <summary>Field number for the "experiments" field.</summary>
        public const int ExperimentsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Mlflow.Experiment> _repeated_experiments_codec
            = pb::FieldCodec.ForMessage(10, global::Mlflow.Experiment.Parser);
        private readonly pbc::RepeatedField<global::Mlflow.Experiment> experiments_ = new pbc::RepeatedField<global::Mlflow.Experiment>();
        /// <summary>
        /// All experiments.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Mlflow.Experiment> Experiments {
          get { return experiments_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!experiments_.Equals(other.experiments_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= experiments_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          experiments_.WriteTo(output, _repeated_experiments_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += experiments_.CalculateSize(_repeated_experiments_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          experiments_.Add(other.experiments_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                experiments_.AddEntriesFrom(input, _repeated_experiments_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GetExperiment : pb::IMessage<GetExperiment> {
    private static readonly pb::MessageParser<GetExperiment> _parser = new pb::MessageParser<GetExperiment>(() => new GetExperiment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExperiment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExperiment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExperiment(GetExperiment other) : this() {
      experimentId_ = other.experimentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExperiment Clone() {
      return new GetExperiment(this);
    }

    /// <summary>Field number for the "experiment_id" field.</summary>
    public const int ExperimentIdFieldNumber = 1;
    private string experimentId_ = "";
    /// <summary>
    /// ID of the associated experiment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExperimentId {
      get { return experimentId_; }
      set {
        experimentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExperiment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExperiment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExperimentId != other.ExperimentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExperimentId.Length != 0) hash ^= ExperimentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExperimentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExperimentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExperimentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExperimentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExperiment other) {
      if (other == null) {
        return;
      }
      if (other.ExperimentId.Length != 0) {
        ExperimentId = other.ExperimentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExperimentId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetExperiment message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.GetExperiment.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          experiment_ = other.experiment_ != null ? other.experiment_.Clone() : null;
          runs_ = other.runs_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        /// <summary>Field number for the "experiment" field.</summary>
        public const int ExperimentFieldNumber = 1;
        private global::Mlflow.Experiment experiment_;
        /// <summary>
        /// Experiment details.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Mlflow.Experiment Experiment {
          get { return experiment_; }
          set {
            experiment_ = value;
          }
        }

        /// <summary>Field number for the "runs" field.</summary>
        public const int RunsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Mlflow.RunInfo> _repeated_runs_codec
            = pb::FieldCodec.ForMessage(18, global::Mlflow.RunInfo.Parser);
        private readonly pbc::RepeatedField<global::Mlflow.RunInfo> runs_ = new pbc::RepeatedField<global::Mlflow.RunInfo>();
        /// <summary>
        /// A collection of active runs in the experiment. Note: this may not contain
        /// all of the experiment's active runs.
        ///
        /// This field is deprecated. Please use the "Search Runs" API to fetch
        /// runs within an experiment.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Mlflow.RunInfo> Runs {
          get { return runs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Experiment, other.Experiment)) return false;
          if(!runs_.Equals(other.runs_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (experiment_ != null) hash ^= Experiment.GetHashCode();
          hash ^= runs_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (experiment_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Experiment);
          }
          runs_.WriteTo(output, _repeated_runs_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (experiment_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Experiment);
          }
          size += runs_.CalculateSize(_repeated_runs_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          if (other.experiment_ != null) {
            if (experiment_ == null) {
              experiment_ = new global::Mlflow.Experiment();
            }
            Experiment.MergeFrom(other.Experiment);
          }
          runs_.Add(other.runs_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (experiment_ == null) {
                  experiment_ = new global::Mlflow.Experiment();
                }
                input.ReadMessage(experiment_);
                break;
              }
              case 18: {
                runs_.AddEntriesFrom(input, _repeated_runs_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DeleteExperiment : pb::IMessage<DeleteExperiment> {
    private static readonly pb::MessageParser<DeleteExperiment> _parser = new pb::MessageParser<DeleteExperiment>(() => new DeleteExperiment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteExperiment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteExperiment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteExperiment(DeleteExperiment other) : this() {
      experimentId_ = other.experimentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteExperiment Clone() {
      return new DeleteExperiment(this);
    }

    /// <summary>Field number for the "experiment_id" field.</summary>
    public const int ExperimentIdFieldNumber = 1;
    private string experimentId_ = "";
    /// <summary>
    /// ID of the associated experiment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExperimentId {
      get { return experimentId_; }
      set {
        experimentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteExperiment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteExperiment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExperimentId != other.ExperimentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExperimentId.Length != 0) hash ^= ExperimentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExperimentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExperimentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExperimentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExperimentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteExperiment other) {
      if (other == null) {
        return;
      }
      if (other.ExperimentId.Length != 0) {
        ExperimentId = other.ExperimentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExperimentId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeleteExperiment message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.DeleteExperiment.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class RestoreExperiment : pb::IMessage<RestoreExperiment> {
    private static readonly pb::MessageParser<RestoreExperiment> _parser = new pb::MessageParser<RestoreExperiment>(() => new RestoreExperiment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestoreExperiment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreExperiment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreExperiment(RestoreExperiment other) : this() {
      experimentId_ = other.experimentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreExperiment Clone() {
      return new RestoreExperiment(this);
    }

    /// <summary>Field number for the "experiment_id" field.</summary>
    public const int ExperimentIdFieldNumber = 1;
    private string experimentId_ = "";
    /// <summary>
    /// ID of the associated experiment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExperimentId {
      get { return experimentId_; }
      set {
        experimentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestoreExperiment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestoreExperiment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExperimentId != other.ExperimentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExperimentId.Length != 0) hash ^= ExperimentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExperimentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExperimentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExperimentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExperimentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestoreExperiment other) {
      if (other == null) {
        return;
      }
      if (other.ExperimentId.Length != 0) {
        ExperimentId = other.ExperimentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExperimentId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RestoreExperiment message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.RestoreExperiment.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class UpdateExperiment : pb::IMessage<UpdateExperiment> {
    private static readonly pb::MessageParser<UpdateExperiment> _parser = new pb::MessageParser<UpdateExperiment>(() => new UpdateExperiment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateExperiment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateExperiment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateExperiment(UpdateExperiment other) : this() {
      experimentId_ = other.experimentId_;
      newName_ = other.newName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateExperiment Clone() {
      return new UpdateExperiment(this);
    }

    /// <summary>Field number for the "experiment_id" field.</summary>
    public const int ExperimentIdFieldNumber = 1;
    private string experimentId_ = "";
    /// <summary>
    /// ID of the associated experiment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExperimentId {
      get { return experimentId_; }
      set {
        experimentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_name" field.</summary>
    public const int NewNameFieldNumber = 2;
    private string newName_ = "";
    /// <summary>
    /// If provided, the experiment's name is changed to the new name. The new name must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateExperiment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateExperiment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExperimentId != other.ExperimentId) return false;
      if (NewName != other.NewName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExperimentId.Length != 0) hash ^= ExperimentId.GetHashCode();
      if (NewName.Length != 0) hash ^= NewName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExperimentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExperimentId);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NewName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExperimentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExperimentId);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateExperiment other) {
      if (other == null) {
        return;
      }
      if (other.ExperimentId.Length != 0) {
        ExperimentId = other.ExperimentId;
      }
      if (other.NewName.Length != 0) {
        NewName = other.NewName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExperimentId = input.ReadString();
            break;
          }
          case 18: {
            NewName = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UpdateExperiment message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.UpdateExperiment.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CreateRun : pb::IMessage<CreateRun> {
    private static readonly pb::MessageParser<CreateRun> _parser = new pb::MessageParser<CreateRun>(() => new CreateRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRun(CreateRun other) : this() {
      experimentId_ = other.experimentId_;
      userId_ = other.userId_;
      startTime_ = other.startTime_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRun Clone() {
      return new CreateRun(this);
    }

    /// <summary>Field number for the "experiment_id" field.</summary>
    public const int ExperimentIdFieldNumber = 1;
    private string experimentId_ = "";
    /// <summary>
    /// ID of the associated experiment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExperimentId {
      get { return experimentId_; }
      set {
        experimentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    /// <summary>
    /// ID of the user executing the run.
    /// This field is deprecated as of MLflow 1.0, and will be removed in a future
    /// MLflow release. Use 'mlflow.user' tag instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 7;
    private long startTime_;
    /// <summary>
    /// Unix timestamp in milliseconds of when the run started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Mlflow.RunTag> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(74, global::Mlflow.RunTag.Parser);
    private readonly pbc::RepeatedField<global::Mlflow.RunTag> tags_ = new pbc::RepeatedField<global::Mlflow.RunTag>();
    /// <summary>
    /// Additional metadata for run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mlflow.RunTag> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExperimentId != other.ExperimentId) return false;
      if (UserId != other.UserId) return false;
      if (StartTime != other.StartTime) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExperimentId.Length != 0) hash ^= ExperimentId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExperimentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExperimentId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(StartTime);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExperimentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExperimentId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRun other) {
      if (other == null) {
        return;
      }
      if (other.ExperimentId.Length != 0) {
        ExperimentId = other.ExperimentId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExperimentId = input.ReadString();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 56: {
            StartTime = input.ReadInt64();
            break;
          }
          case 74: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CreateRun message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.CreateRun.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          run_ = other.run_ != null ? other.run_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        /// <summary>Field number for the "run" field.</summary>
        public const int RunFieldNumber = 1;
        private global::Mlflow.Run run_;
        /// <summary>
        /// The newly created run.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Mlflow.Run Run {
          get { return run_; }
          set {
            run_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Run, other.Run)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (run_ != null) hash ^= Run.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (run_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Run);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (run_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Run);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          if (other.run_ != null) {
            if (run_ == null) {
              run_ = new global::Mlflow.Run();
            }
            Run.MergeFrom(other.Run);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (run_ == null) {
                  run_ = new global::Mlflow.Run();
                }
                input.ReadMessage(run_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class UpdateRun : pb::IMessage<UpdateRun> {
    private static readonly pb::MessageParser<UpdateRun> _parser = new pb::MessageParser<UpdateRun>(() => new UpdateRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRun(UpdateRun other) : this() {
      runId_ = other.runId_;
      runUuid_ = other.runUuid_;
      status_ = other.status_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRun Clone() {
      return new UpdateRun(this);
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 4;
    private string runId_ = "";
    /// <summary>
    /// ID of the run to update. Must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run_uuid" field.</summary>
    public const int RunUuidFieldNumber = 1;
    private string runUuid_ = "";
    /// <summary>
    /// [Deprecated, use run_id instead] ID of the run to update.. This field will
    /// be removed in a future MLflow version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunUuid {
      get { return runUuid_; }
      set {
        runUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Mlflow.RunStatus status_ = 0;
    /// <summary>
    /// Updated status of the run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mlflow.RunStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private long endTime_;
    /// <summary>
    ///Unix timestamp in milliseconds of when the run ended.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunId != other.RunId) return false;
      if (RunUuid != other.RunUuid) return false;
      if (Status != other.Status) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      if (RunUuid.Length != 0) hash ^= RunUuid.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunUuid);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(EndTime);
      }
      if (RunId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      if (RunUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunUuid);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRun other) {
      if (other == null) {
        return;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      if (other.RunUuid.Length != 0) {
        RunUuid = other.RunUuid;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RunUuid = input.ReadString();
            break;
          }
          case 16: {
            status_ = (global::Mlflow.RunStatus) input.ReadEnum();
            break;
          }
          case 24: {
            EndTime = input.ReadInt64();
            break;
          }
          case 34: {
            RunId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UpdateRun message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.UpdateRun.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          runInfo_ = other.runInfo_ != null ? other.runInfo_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        /// <summary>Field number for the "run_info" field.</summary>
        public const int RunInfoFieldNumber = 1;
        private global::Mlflow.RunInfo runInfo_;
        /// <summary>
        /// Updated metadata of the run.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Mlflow.RunInfo RunInfo {
          get { return runInfo_; }
          set {
            runInfo_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(RunInfo, other.RunInfo)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (runInfo_ != null) hash ^= RunInfo.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (runInfo_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(RunInfo);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (runInfo_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RunInfo);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          if (other.runInfo_ != null) {
            if (runInfo_ == null) {
              runInfo_ = new global::Mlflow.RunInfo();
            }
            RunInfo.MergeFrom(other.RunInfo);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (runInfo_ == null) {
                  runInfo_ = new global::Mlflow.RunInfo();
                }
                input.ReadMessage(runInfo_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DeleteRun : pb::IMessage<DeleteRun> {
    private static readonly pb::MessageParser<DeleteRun> _parser = new pb::MessageParser<DeleteRun>(() => new DeleteRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRun(DeleteRun other) : this() {
      runId_ = other.runId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRun Clone() {
      return new DeleteRun(this);
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 1;
    private string runId_ = "";
    /// <summary>
    /// ID of the run to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunId != other.RunId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRun other) {
      if (other == null) {
        return;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RunId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeleteRun message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.DeleteRun.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class RestoreRun : pb::IMessage<RestoreRun> {
    private static readonly pb::MessageParser<RestoreRun> _parser = new pb::MessageParser<RestoreRun>(() => new RestoreRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestoreRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreRun(RestoreRun other) : this() {
      runId_ = other.runId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreRun Clone() {
      return new RestoreRun(this);
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 1;
    private string runId_ = "";
    /// <summary>
    /// ID of the run to restore.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestoreRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestoreRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunId != other.RunId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestoreRun other) {
      if (other == null) {
        return;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RunId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RestoreRun message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.RestoreRun.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class LogMetric : pb::IMessage<LogMetric> {
    private static readonly pb::MessageParser<LogMetric> _parser = new pb::MessageParser<LogMetric>(() => new LogMetric());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogMetric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogMetric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogMetric(LogMetric other) : this() {
      runId_ = other.runId_;
      runUuid_ = other.runUuid_;
      key_ = other.key_;
      value_ = other.value_;
      timestamp_ = other.timestamp_;
      step_ = other.step_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogMetric Clone() {
      return new LogMetric(this);
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 6;
    private string runId_ = "";
    /// <summary>
    /// ID of the run under which to log the metric. Must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run_uuid" field.</summary>
    public const int RunUuidFieldNumber = 1;
    private string runUuid_ = "";
    /// <summary>
    /// [Deprecated, use run_id instead] ID of the run under which to log the metric. This field will
    /// be removed in a future MLflow version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunUuid {
      get { return runUuid_; }
      set {
        runUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// Name of the metric.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private double value_;
    /// <summary>
    /// Double value of the metric being logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private long timestamp_;
    /// <summary>
    /// Unix timestamp in milliseconds at the time metric was logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 5;
    private long step_;
    /// <summary>
    /// Step at which to log the metric
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogMetric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogMetric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunId != other.RunId) return false;
      if (RunUuid != other.RunUuid) return false;
      if (Key != other.Key) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Step != other.Step) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      if (RunUuid.Length != 0) hash ^= RunUuid.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Step != 0L) hash ^= Step.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunUuid);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Value != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Value);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Timestamp);
      }
      if (Step != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Step);
      }
      if (RunId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      if (RunUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunUuid);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Step != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Step);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogMetric other) {
      if (other == null) {
        return;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      if (other.RunUuid.Length != 0) {
        RunUuid = other.RunUuid;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Step != 0L) {
        Step = other.Step;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RunUuid = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 25: {
            Value = input.ReadDouble();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 40: {
            Step = input.ReadInt64();
            break;
          }
          case 50: {
            RunId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LogMetric message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.LogMetric.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class LogParam : pb::IMessage<LogParam> {
    private static readonly pb::MessageParser<LogParam> _parser = new pb::MessageParser<LogParam>(() => new LogParam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogParam(LogParam other) : this() {
      runId_ = other.runId_;
      runUuid_ = other.runUuid_;
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogParam Clone() {
      return new LogParam(this);
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 4;
    private string runId_ = "";
    /// <summary>
    /// ID of the run under which to log the param. Must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run_uuid" field.</summary>
    public const int RunUuidFieldNumber = 1;
    private string runUuid_ = "";
    /// <summary>
    /// [Deprecated, use run_id instead] ID of the run under which to log the param. This field will
    /// be removed in a future MLflow version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunUuid {
      get { return runUuid_; }
      set {
        runUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// Name of the param. Maximum size is 255 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    /// <summary>
    /// String value of the param being logged. Maximum size is 500 bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunId != other.RunId) return false;
      if (RunUuid != other.RunUuid) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      if (RunUuid.Length != 0) hash ^= RunUuid.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunUuid);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (RunId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      if (RunUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunUuid);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogParam other) {
      if (other == null) {
        return;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      if (other.RunUuid.Length != 0) {
        RunUuid = other.RunUuid;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RunUuid = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 34: {
            RunId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LogParam message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.LogParam.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SetExperimentTag : pb::IMessage<SetExperimentTag> {
    private static readonly pb::MessageParser<SetExperimentTag> _parser = new pb::MessageParser<SetExperimentTag>(() => new SetExperimentTag());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetExperimentTag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetExperimentTag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetExperimentTag(SetExperimentTag other) : this() {
      experimentId_ = other.experimentId_;
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetExperimentTag Clone() {
      return new SetExperimentTag(this);
    }

    /// <summary>Field number for the "experiment_id" field.</summary>
    public const int ExperimentIdFieldNumber = 1;
    private string experimentId_ = "";
    /// <summary>
    /// ID of the experiment under which to log the tag. Must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExperimentId {
      get { return experimentId_; }
      set {
        experimentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// Name of the tag. Maximum size depends on storage backend.
    /// All storage backends are guaranteed to support key values up to 250 bytes in size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    /// <summary>
    /// String value of the tag being logged. Maximum size depends on storage backend.
    /// All storage backends are guaranteed to support key values up to 5000 bytes in size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetExperimentTag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetExperimentTag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExperimentId != other.ExperimentId) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExperimentId.Length != 0) hash ^= ExperimentId.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExperimentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExperimentId);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExperimentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExperimentId);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetExperimentTag other) {
      if (other == null) {
        return;
      }
      if (other.ExperimentId.Length != 0) {
        ExperimentId = other.ExperimentId;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExperimentId = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SetExperimentTag message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.SetExperimentTag.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SetTag : pb::IMessage<SetTag> {
    private static readonly pb::MessageParser<SetTag> _parser = new pb::MessageParser<SetTag>(() => new SetTag());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTag(SetTag other) : this() {
      runId_ = other.runId_;
      runUuid_ = other.runUuid_;
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTag Clone() {
      return new SetTag(this);
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 4;
    private string runId_ = "";
    /// <summary>
    /// ID of the run under which to log the tag. Must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run_uuid" field.</summary>
    public const int RunUuidFieldNumber = 1;
    private string runUuid_ = "";
    /// <summary>
    /// [Deprecated, use run_id instead] ID of the run under which to log the tag. This field will
    /// be removed in a future MLflow version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunUuid {
      get { return runUuid_; }
      set {
        runUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// Name of the tag. Maximum size depends on storage backend.
    /// All storage backends are guaranteed to support key values up to 250 bytes in size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    /// <summary>
    /// String value of the tag being logged. Maximum size depends on storage backend.
    /// All storage backends are guaranteed to support key values up to 5000 bytes in size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunId != other.RunId) return false;
      if (RunUuid != other.RunUuid) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      if (RunUuid.Length != 0) hash ^= RunUuid.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunUuid);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (RunId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      if (RunUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunUuid);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTag other) {
      if (other == null) {
        return;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      if (other.RunUuid.Length != 0) {
        RunUuid = other.RunUuid;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RunUuid = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 34: {
            RunId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SetTag message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.SetTag.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DeleteTag : pb::IMessage<DeleteTag> {
    private static readonly pb::MessageParser<DeleteTag> _parser = new pb::MessageParser<DeleteTag>(() => new DeleteTag());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteTag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTag(DeleteTag other) : this() {
      runId_ = other.runId_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteTag Clone() {
      return new DeleteTag(this);
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 1;
    private string runId_ = "";
    /// <summary>
    /// ID of the run that the tag was logged under. Must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// Name of the tag. Maximum size is 255 bytes. Must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteTag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteTag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunId != other.RunId) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunId);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteTag other) {
      if (other == null) {
        return;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RunId = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeleteTag message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.DeleteTag.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GetRun : pb::IMessage<GetRun> {
    private static readonly pb::MessageParser<GetRun> _parser = new pb::MessageParser<GetRun>(() => new GetRun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRun(GetRun other) : this() {
      runId_ = other.runId_;
      runUuid_ = other.runUuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRun Clone() {
      return new GetRun(this);
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 2;
    private string runId_ = "";
    /// <summary>
    /// ID of the run to fetch. Must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run_uuid" field.</summary>
    public const int RunUuidFieldNumber = 1;
    private string runUuid_ = "";
    /// <summary>
    /// [Deprecated, use run_id instead] ID of the run to fetch. This field will
    /// be removed in a future MLflow version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunUuid {
      get { return runUuid_; }
      set {
        runUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunId != other.RunId) return false;
      if (RunUuid != other.RunUuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      if (RunUuid.Length != 0) hash ^= RunUuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunUuid);
      }
      if (RunId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      if (RunUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunUuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRun other) {
      if (other == null) {
        return;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      if (other.RunUuid.Length != 0) {
        RunUuid = other.RunUuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RunUuid = input.ReadString();
            break;
          }
          case 18: {
            RunId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetRun message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.GetRun.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          run_ = other.run_ != null ? other.run_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        /// <summary>Field number for the "run" field.</summary>
        public const int RunFieldNumber = 1;
        private global::Mlflow.Run run_;
        /// <summary>
        /// Run metadata (name, start time, etc) and data (metrics, params, and tags).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Mlflow.Run Run {
          get { return run_; }
          set {
            run_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Run, other.Run)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (run_ != null) hash ^= Run.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (run_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Run);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (run_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Run);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          if (other.run_ != null) {
            if (run_ == null) {
              run_ = new global::Mlflow.Run();
            }
            Run.MergeFrom(other.Run);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (run_ == null) {
                  run_ = new global::Mlflow.Run();
                }
                input.ReadMessage(run_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SearchRuns : pb::IMessage<SearchRuns> {
    private static readonly pb::MessageParser<SearchRuns> _parser = new pb::MessageParser<SearchRuns>(() => new SearchRuns());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchRuns> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRuns() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRuns(SearchRuns other) : this() {
      experimentIds_ = other.experimentIds_.Clone();
      filter_ = other.filter_;
      runViewType_ = other.runViewType_;
      maxResults_ = other.maxResults_;
      orderBy_ = other.orderBy_.Clone();
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchRuns Clone() {
      return new SearchRuns(this);
    }

    /// <summary>Field number for the "experiment_ids" field.</summary>
    public const int ExperimentIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_experimentIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> experimentIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of experiment IDs to search over.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExperimentIds {
      get { return experimentIds_; }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private string filter_ = "";
    /// <summary>
    /// A filter expression over params, metrics, and tags, that allows returning a subset of
    /// runs. The syntax is a subset of SQL that supports ANDing together binary operations
    /// between a param, metric, or tag and a constant.
    ///
    /// Example: ``metrics.rmse &lt; 1 and params.model_class = 'LogisticRegression'``
    ///
    /// You can select columns with special characters (hyphen, space, period, etc.) by using double quotes:
    /// ``metrics."model class" = 'LinearRegression' and tags."user-name" = 'Tomas'``
    ///
    /// Supported operators are ``=``, ``!=``, ``>``, ``>=``, ``&lt;``, and ``&lt;=``.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run_view_type" field.</summary>
    public const int RunViewTypeFieldNumber = 3;
    private global::Mlflow.ViewType runViewType_ = 0;
    /// <summary>
    /// Whether to display only active, only deleted, or all runs.
    /// Defaults to only active runs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mlflow.ViewType RunViewType {
      get { return runViewType_; }
      set {
        runViewType_ = value;
      }
    }

    /// <summary>Field number for the "max_results" field.</summary>
    public const int MaxResultsFieldNumber = 5;
    private int maxResults_;
    /// <summary>
    /// Maximum number of runs desired. Max threshold is 50000
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxResults {
      get { return maxResults_; }
      set {
        maxResults_ = value;
      }
    }

    /// <summary>Field number for the "order_by" field.</summary>
    public const int OrderByFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_orderBy_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> orderBy_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of columns to be ordered by, including attributes, params, metrics, and tags with an
    /// optional "DESC" or "ASC" annotation, where "ASC" is the default.
    /// Example: ["params.input DESC", "metrics.alpha ASC", "metrics.rmse"]
    /// Tiebreaks are done by start_time DESC followed by run_id for runs with the same start time
    /// (and this is the default ordering criterion if order_by is not provided).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> OrderBy {
      get { return orderBy_; }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 7;
    private string pageToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchRuns);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchRuns other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!experimentIds_.Equals(other.experimentIds_)) return false;
      if (Filter != other.Filter) return false;
      if (RunViewType != other.RunViewType) return false;
      if (MaxResults != other.MaxResults) return false;
      if(!orderBy_.Equals(other.orderBy_)) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= experimentIds_.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (RunViewType != 0) hash ^= RunViewType.GetHashCode();
      if (MaxResults != 0) hash ^= MaxResults.GetHashCode();
      hash ^= orderBy_.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      experimentIds_.WriteTo(output, _repeated_experimentIds_codec);
      if (RunViewType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RunViewType);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filter);
      }
      if (MaxResults != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxResults);
      }
      orderBy_.WriteTo(output, _repeated_orderBy_codec);
      if (PageToken.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += experimentIds_.CalculateSize(_repeated_experimentIds_codec);
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (RunViewType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RunViewType);
      }
      if (MaxResults != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxResults);
      }
      size += orderBy_.CalculateSize(_repeated_orderBy_codec);
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchRuns other) {
      if (other == null) {
        return;
      }
      experimentIds_.Add(other.experimentIds_);
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.RunViewType != 0) {
        RunViewType = other.RunViewType;
      }
      if (other.MaxResults != 0) {
        MaxResults = other.MaxResults;
      }
      orderBy_.Add(other.orderBy_);
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            experimentIds_.AddEntriesFrom(input, _repeated_experimentIds_codec);
            break;
          }
          case 24: {
            runViewType_ = (global::Mlflow.ViewType) input.ReadEnum();
            break;
          }
          case 34: {
            Filter = input.ReadString();
            break;
          }
          case 40: {
            MaxResults = input.ReadInt32();
            break;
          }
          case 50: {
            orderBy_.AddEntriesFrom(input, _repeated_orderBy_codec);
            break;
          }
          case 58: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SearchRuns message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.SearchRuns.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          runs_ = other.runs_.Clone();
          nextPageToken_ = other.nextPageToken_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        /// <summary>Field number for the "runs" field.</summary>
        public const int RunsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Mlflow.Run> _repeated_runs_codec
            = pb::FieldCodec.ForMessage(10, global::Mlflow.Run.Parser);
        private readonly pbc::RepeatedField<global::Mlflow.Run> runs_ = new pbc::RepeatedField<global::Mlflow.Run>();
        /// <summary>
        /// Runs that match the search criteria.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Mlflow.Run> Runs {
          get { return runs_; }
        }

        /// <summary>Field number for the "next_page_token" field.</summary>
        public const int NextPageTokenFieldNumber = 2;
        private string nextPageToken_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NextPageToken {
          get { return nextPageToken_; }
          set {
            nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!runs_.Equals(other.runs_)) return false;
          if (NextPageToken != other.NextPageToken) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= runs_.GetHashCode();
          if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          runs_.WriteTo(output, _repeated_runs_codec);
          if (NextPageToken.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(NextPageToken);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += runs_.CalculateSize(_repeated_runs_codec);
          if (NextPageToken.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          runs_.Add(other.runs_);
          if (other.NextPageToken.Length != 0) {
            NextPageToken = other.NextPageToken;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                runs_.AddEntriesFrom(input, _repeated_runs_codec);
                break;
              }
              case 18: {
                NextPageToken = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ListArtifacts : pb::IMessage<ListArtifacts> {
    private static readonly pb::MessageParser<ListArtifacts> _parser = new pb::MessageParser<ListArtifacts>(() => new ListArtifacts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListArtifacts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListArtifacts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListArtifacts(ListArtifacts other) : this() {
      runId_ = other.runId_;
      runUuid_ = other.runUuid_;
      path_ = other.path_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListArtifacts Clone() {
      return new ListArtifacts(this);
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 3;
    private string runId_ = "";
    /// <summary>
    /// ID of the run whose artifacts to list. Must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run_uuid" field.</summary>
    public const int RunUuidFieldNumber = 1;
    private string runUuid_ = "";
    /// <summary>
    /// [Deprecated, use run_id instead] ID of the run whose artifacts to list. This field will
    /// be removed in a future MLflow version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunUuid {
      get { return runUuid_; }
      set {
        runUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    /// <summary>
    /// Filter artifacts matching this path (a relative path from the root artifact directory).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Token indicating the page of artifact results to fetch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListArtifacts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListArtifacts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunId != other.RunId) return false;
      if (RunUuid != other.RunUuid) return false;
      if (Path != other.Path) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      if (RunUuid.Length != 0) hash ^= RunUuid.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunUuid);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (RunId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RunId);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      if (RunUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunUuid);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListArtifacts other) {
      if (other == null) {
        return;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      if (other.RunUuid.Length != 0) {
        RunUuid = other.RunUuid;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RunUuid = input.ReadString();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            RunId = input.ReadString();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ListArtifacts message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.ListArtifacts.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          rootUri_ = other.rootUri_;
          files_ = other.files_.Clone();
          nextPageToken_ = other.nextPageToken_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        /// <summary>Field number for the "root_uri" field.</summary>
        public const int RootUriFieldNumber = 1;
        private string rootUri_ = "";
        /// <summary>
        /// Root artifact directory for the run.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RootUri {
          get { return rootUri_; }
          set {
            rootUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "files" field.</summary>
        public const int FilesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Mlflow.FileInfo> _repeated_files_codec
            = pb::FieldCodec.ForMessage(18, global::Mlflow.FileInfo.Parser);
        private readonly pbc::RepeatedField<global::Mlflow.FileInfo> files_ = new pbc::RepeatedField<global::Mlflow.FileInfo>();
        /// <summary>
        /// File location and metadata for artifacts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Mlflow.FileInfo> Files {
          get { return files_; }
        }

        /// <summary>Field number for the "next_page_token" field.</summary>
        public const int NextPageTokenFieldNumber = 3;
        private string nextPageToken_ = "";
        /// <summary>
        /// Token that can be used to retrieve the next page of artifact results
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NextPageToken {
          get { return nextPageToken_; }
          set {
            nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RootUri != other.RootUri) return false;
          if(!files_.Equals(other.files_)) return false;
          if (NextPageToken != other.NextPageToken) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RootUri.Length != 0) hash ^= RootUri.GetHashCode();
          hash ^= files_.GetHashCode();
          if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RootUri.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(RootUri);
          }
          files_.WriteTo(output, _repeated_files_codec);
          if (NextPageToken.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(NextPageToken);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RootUri.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RootUri);
          }
          size += files_.CalculateSize(_repeated_files_codec);
          if (NextPageToken.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          if (other.RootUri.Length != 0) {
            RootUri = other.RootUri;
          }
          files_.Add(other.files_);
          if (other.NextPageToken.Length != 0) {
            NextPageToken = other.NextPageToken;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                RootUri = input.ReadString();
                break;
              }
              case 18: {
                files_.AddEntriesFrom(input, _repeated_files_codec);
                break;
              }
              case 26: {
                NextPageToken = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Metadata of a single artifact file or directory.
  /// </summary>
  public sealed partial class FileInfo : pb::IMessage<FileInfo> {
    private static readonly pb::MessageParser<FileInfo> _parser = new pb::MessageParser<FileInfo>(() => new FileInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileInfo(FileInfo other) : this() {
      path_ = other.path_;
      isDir_ = other.isDir_;
      fileSize_ = other.fileSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileInfo Clone() {
      return new FileInfo(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// Path relative to the root artifact directory run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_dir" field.</summary>
    public const int IsDirFieldNumber = 2;
    private bool isDir_;
    /// <summary>
    /// Whether the path is a directory.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDir {
      get { return isDir_; }
      set {
        isDir_ = value;
      }
    }

    /// <summary>Field number for the "file_size" field.</summary>
    public const int FileSizeFieldNumber = 3;
    private long fileSize_;
    /// <summary>
    /// Size in bytes. Unset for directories.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FileSize {
      get { return fileSize_; }
      set {
        fileSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (IsDir != other.IsDir) return false;
      if (FileSize != other.FileSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (IsDir != false) hash ^= IsDir.GetHashCode();
      if (FileSize != 0L) hash ^= FileSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (IsDir != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDir);
      }
      if (FileSize != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FileSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (IsDir != false) {
        size += 1 + 1;
      }
      if (FileSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FileSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileInfo other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.IsDir != false) {
        IsDir = other.IsDir;
      }
      if (other.FileSize != 0L) {
        FileSize = other.FileSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 16: {
            IsDir = input.ReadBool();
            break;
          }
          case 24: {
            FileSize = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMetricHistory : pb::IMessage<GetMetricHistory> {
    private static readonly pb::MessageParser<GetMetricHistory> _parser = new pb::MessageParser<GetMetricHistory>(() => new GetMetricHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMetricHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMetricHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMetricHistory(GetMetricHistory other) : this() {
      runId_ = other.runId_;
      runUuid_ = other.runUuid_;
      metricKey_ = other.metricKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMetricHistory Clone() {
      return new GetMetricHistory(this);
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 3;
    private string runId_ = "";
    /// <summary>
    /// ID of the run from which to fetch metric values. Must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run_uuid" field.</summary>
    public const int RunUuidFieldNumber = 1;
    private string runUuid_ = "";
    /// <summary>
    /// [Deprecated, use run_id instead] ID of the run from which to fetch metric values. This field
    /// will be removed in a future MLflow version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunUuid {
      get { return runUuid_; }
      set {
        runUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metric_key" field.</summary>
    public const int MetricKeyFieldNumber = 2;
    private string metricKey_ = "";
    /// <summary>
    /// Name of the metric.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MetricKey {
      get { return metricKey_; }
      set {
        metricKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMetricHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMetricHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunId != other.RunId) return false;
      if (RunUuid != other.RunUuid) return false;
      if (MetricKey != other.MetricKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      if (RunUuid.Length != 0) hash ^= RunUuid.GetHashCode();
      if (MetricKey.Length != 0) hash ^= MetricKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunUuid);
      }
      if (MetricKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MetricKey);
      }
      if (RunId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RunId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      if (RunUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunUuid);
      }
      if (MetricKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MetricKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMetricHistory other) {
      if (other == null) {
        return;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      if (other.RunUuid.Length != 0) {
        RunUuid = other.RunUuid;
      }
      if (other.MetricKey.Length != 0) {
        MetricKey = other.MetricKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RunUuid = input.ReadString();
            break;
          }
          case 18: {
            MetricKey = input.ReadString();
            break;
          }
          case 26: {
            RunId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetMetricHistory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.GetMetricHistory.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          metrics_ = other.metrics_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        /// <summary>Field number for the "metrics" field.</summary>
        public const int MetricsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Mlflow.Metric> _repeated_metrics_codec
            = pb::FieldCodec.ForMessage(10, global::Mlflow.Metric.Parser);
        private readonly pbc::RepeatedField<global::Mlflow.Metric> metrics_ = new pbc::RepeatedField<global::Mlflow.Metric>();
        /// <summary>
        /// All logged values for this metric.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Mlflow.Metric> Metrics {
          get { return metrics_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!metrics_.Equals(other.metrics_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= metrics_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          metrics_.WriteTo(output, _repeated_metrics_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += metrics_.CalculateSize(_repeated_metrics_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          metrics_.Add(other.metrics_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class LogBatch : pb::IMessage<LogBatch> {
    private static readonly pb::MessageParser<LogBatch> _parser = new pb::MessageParser<LogBatch>(() => new LogBatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogBatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogBatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogBatch(LogBatch other) : this() {
      runId_ = other.runId_;
      metrics_ = other.metrics_.Clone();
      params_ = other.params_.Clone();
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogBatch Clone() {
      return new LogBatch(this);
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 1;
    private string runId_ = "";
    /// <summary>
    /// ID of the run to log under
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Mlflow.Metric> _repeated_metrics_codec
        = pb::FieldCodec.ForMessage(18, global::Mlflow.Metric.Parser);
    private readonly pbc::RepeatedField<global::Mlflow.Metric> metrics_ = new pbc::RepeatedField<global::Mlflow.Metric>();
    /// <summary>
    /// Metrics to log. A single request can contain up to 1000 metrics, and up to 1000
    /// metrics, params, and tags in total.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mlflow.Metric> Metrics {
      get { return metrics_; }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Mlflow.Param> _repeated_params_codec
        = pb::FieldCodec.ForMessage(26, global::Mlflow.Param.Parser);
    private readonly pbc::RepeatedField<global::Mlflow.Param> params_ = new pbc::RepeatedField<global::Mlflow.Param>();
    /// <summary>
    /// Params to log. A single request can contain up to 100 params, and up to 1000
    /// metrics, params, and tags in total.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mlflow.Param> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Mlflow.RunTag> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(34, global::Mlflow.RunTag.Parser);
    private readonly pbc::RepeatedField<global::Mlflow.RunTag> tags_ = new pbc::RepeatedField<global::Mlflow.RunTag>();
    /// <summary>
    /// Tags to log. A single request can contain up to 100 tags, and up to 1000
    /// metrics, params, and tags in total.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mlflow.RunTag> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogBatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogBatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunId != other.RunId) return false;
      if(!metrics_.Equals(other.metrics_)) return false;
      if(!params_.Equals(other.params_)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      hash ^= metrics_.GetHashCode();
      hash ^= params_.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunId);
      }
      metrics_.WriteTo(output, _repeated_metrics_codec);
      params_.WriteTo(output, _repeated_params_codec);
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      size += metrics_.CalculateSize(_repeated_metrics_codec);
      size += params_.CalculateSize(_repeated_params_codec);
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogBatch other) {
      if (other == null) {
        return;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      metrics_.Add(other.metrics_);
      params_.Add(other.params_);
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RunId = input.ReadString();
            break;
          }
          case 18: {
            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
            break;
          }
          case 26: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 34: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LogBatch message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.LogBatch.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class LogModel : pb::IMessage<LogModel> {
    private static readonly pb::MessageParser<LogModel> _parser = new pb::MessageParser<LogModel>(() => new LogModel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogModel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogModel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogModel(LogModel other) : this() {
      runId_ = other.runId_;
      modelJson_ = other.modelJson_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogModel Clone() {
      return new LogModel(this);
    }

    /// <summary>Field number for the "run_id" field.</summary>
    public const int RunIdFieldNumber = 1;
    private string runId_ = "";
    /// <summary>
    /// ID of the run to log under
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunId {
      get { return runId_; }
      set {
        runId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_json" field.</summary>
    public const int ModelJsonFieldNumber = 2;
    private string modelJson_ = "";
    /// <summary>
    /// MLmodel file in json format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelJson {
      get { return modelJson_; }
      set {
        modelJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogModel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogModel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunId != other.RunId) return false;
      if (ModelJson != other.ModelJson) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunId.Length != 0) hash ^= RunId.GetHashCode();
      if (ModelJson.Length != 0) hash ^= ModelJson.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunId);
      }
      if (ModelJson.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModelJson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunId);
      }
      if (ModelJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelJson);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogModel other) {
      if (other == null) {
        return;
      }
      if (other.RunId.Length != 0) {
        RunId = other.RunId;
      }
      if (other.ModelJson.Length != 0) {
        ModelJson = other.ModelJson;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RunId = input.ReadString();
            break;
          }
          case 18: {
            ModelJson = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LogModel message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.LogModel.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GetExperimentByName : pb::IMessage<GetExperimentByName> {
    private static readonly pb::MessageParser<GetExperimentByName> _parser = new pb::MessageParser<GetExperimentByName>(() => new GetExperimentByName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExperimentByName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mlflow.ServiceReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExperimentByName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExperimentByName(GetExperimentByName other) : this() {
      experimentName_ = other.experimentName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExperimentByName Clone() {
      return new GetExperimentByName(this);
    }

    /// <summary>Field number for the "experiment_name" field.</summary>
    public const int ExperimentNameFieldNumber = 1;
    private string experimentName_ = "";
    /// <summary>
    /// Name of the associated experiment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExperimentName {
      get { return experimentName_; }
      set {
        experimentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExperimentByName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExperimentByName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExperimentName != other.ExperimentName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExperimentName.Length != 0) hash ^= ExperimentName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExperimentName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExperimentName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExperimentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExperimentName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExperimentByName other) {
      if (other == null) {
        return;
      }
      if (other.ExperimentName.Length != 0) {
        ExperimentName = other.ExperimentName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExperimentName = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetExperimentByName message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mlflow.GetExperimentByName.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          experiment_ = other.experiment_ != null ? other.experiment_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        /// <summary>Field number for the "experiment" field.</summary>
        public const int ExperimentFieldNumber = 1;
        private global::Mlflow.Experiment experiment_;
        /// <summary>
        /// Experiment details.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Mlflow.Experiment Experiment {
          get { return experiment_; }
          set {
            experiment_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Experiment, other.Experiment)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (experiment_ != null) hash ^= Experiment.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (experiment_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Experiment);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (experiment_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Experiment);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          if (other.experiment_ != null) {
            if (experiment_ == null) {
              experiment_ = new global::Mlflow.Experiment();
            }
            Experiment.MergeFrom(other.Experiment);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (experiment_ == null) {
                  experiment_ = new global::Mlflow.Experiment();
                }
                input.ReadMessage(experiment_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
